<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>恒星的演化和几种最终归宿（包括黑洞、超新星等特殊天体）</title>
      <link href="/2022/11/15/%E6%81%92%E6%98%9F%E7%9A%84%E6%BC%94%E5%8C%96%E5%92%8C%E5%87%A0%E7%A7%8D%E6%9C%80%E7%BB%88%E5%BD%92%E5%AE%BF%EF%BC%88%E5%8C%85%E6%8B%AC%E9%BB%91%E6%B4%9E%E3%80%81%E8%B6%85%E6%96%B0%E6%98%9F%E7%AD%89%E7%89%B9%E6%AE%8A%E5%A4%A9%E4%BD%93%EF%BC%89/"/>
      <url>/2022/11/15/%E6%81%92%E6%98%9F%E7%9A%84%E6%BC%94%E5%8C%96%E5%92%8C%E5%87%A0%E7%A7%8D%E6%9C%80%E7%BB%88%E5%BD%92%E5%AE%BF%EF%BC%88%E5%8C%85%E6%8B%AC%E9%BB%91%E6%B4%9E%E3%80%81%E8%B6%85%E6%96%B0%E6%98%9F%E7%AD%89%E7%89%B9%E6%AE%8A%E5%A4%A9%E4%BD%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己总结用人话总结的，解释非常的具体，相信大家都可以很容易的理解恒星的形成与几种演化</p><h1 id="区分恒星、行星、矮行星"><a href="#区分恒星、行星、矮行星" class="headerlink" title="区分恒星、行星、矮行星"></a>区分恒星、行星、矮行星</h1><p>1、用人话讲，恒星是指宇宙中靠核聚变产生的能量而自身能发热发光的星体，比如太阳；<br>2、而行星通常指自身不发光，环绕着恒星，公转轨道附近没有和自身体积以及质量相仿的其他天体的天体，比如太阳系的八大行星<br>3、冥王星正是因为其轨迹与海王星的轨迹穿插不契合第三个条件而被踢出行星行列，降级为矮行星，矮行星就是介于小行星与行星之间的天体</p><h1 id="恒星的形成机制"><a href="#恒星的形成机制" class="headerlink" title="恒星的形成机制"></a>恒星的形成机制</h1><h2 id="分子云"><a href="#分子云" class="headerlink" title="分子云"></a>分子云</h2><p>是形成恒星的场所，星云物质由大约3&#x2F;4的氢、1&#x2F;4的氦和少量其他元素组成，分子云的质量占银河系总质量的一半。在银河系中，估计有6000个分子云，每个分子云的质量都超过100000太阳质量。</p><h2 id="形成过程"><a href="#形成过程" class="headerlink" title="形成过程"></a>形成过程</h2><p>恒星诞生于分子云中一个更紧密的地方，是由致密气体和尘埃组成的不透明云（暗云），称为博克球状体，恒星的形成需要三个条件：氢、引力和时间。其中引力最为关键，用难以想象的力量把各种物质聚集在一起，逐渐形成庞大的旋涡状星云。<br><strong>下图为旋涡星云</strong><br><img src="https://img-blog.csdnimg.cn/20200719093650599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="吸积盘"><a href="#吸积盘" class="headerlink" title="吸积盘"></a>吸积盘</h3><p>吸积盘是一种由弥散物质组成的，围绕中心体转动的结构。还记得2019.4.10晚21点发布的黑洞照片吗，四周红色的就是物质在没进去黑洞时高速摩擦碰撞相互作用发光发热的东西。叫做吸积盘，中子星、白矮星周围也会有吸积盘。<br><strong>黑洞的吸积盘</strong><br><img src="https://img-blog.csdnimg.cn/20200719094314540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据恒星质量不同，它的形成机制也有些微不同</p><h3 id="低质量恒星形成机制"><a href="#低质量恒星形成机制" class="headerlink" title="低质量恒星形成机制"></a>低质量恒星形成机制</h3><p>低质量恒星是由分子云中旋转密度增加的引力坍缩形成的。由气体和尘埃组成的旋转云的塌缩导致吸积盘的形成，物质通过吸积盘被引导到中心<strong>原恒星</strong>上（原恒星就是还未收缩完成的天体）</p><h3 id="大质量恒星形成机制"><a href="#大质量恒星形成机制" class="headerlink" title="大质量恒星形成机制"></a>大质量恒星形成机制</h3><p>大质量恒星释放出大量的辐射，这些辐射会对正在形成的物质产生反作用力。过去，人们认为这种辐射压力可能足够大，足以阻止大质量原恒星的吸积，并阻止质量超过几十个太阳质量的恒星的形成。最近的理论研究表明，喷流和外流的产生清除了一个空腔，大质量原恒星的大部分辐射可以通过这个空腔逸出，而不妨碍通过圆盘和原恒星的吸积 。大质量恒星可能因此能够通过一种类似于低质量恒星形成机制的机制形成</p><h3 id="举一个太阳形成过程的例子"><a href="#举一个太阳形成过程的例子" class="headerlink" title="举一个太阳形成过程的例子"></a>举一个太阳形成过程的例子</h3><p>太阳这颗恒星需要一个方圆900亿千米的<strong>星云团</strong>。从星云聚为恒星的过程可分为快收缩阶段和慢收缩阶段。前者历经几十万年，后者历经数千万年。星云快收缩后半径仅为原来的百分之一，平均密度提高1亿亿倍，最后形成一个“星胚”。这是一个又浓又黑的云团，中心为一密集核。此后进入慢收缩，就是<strong>原恒星</strong><br>阶段。这时星胚温度不断升高，温度升高到一定的程度就要闪烁发光，以示其存在，并步入恒星的幼年阶段。但这时恒星尚不稳定，仍被弥漫的星云物质所包围着（<strong>就是吸积盘</strong>），并向外界抛射物质。如今太阳已经是<strong>主序星</strong>了，已经45亿岁了，正值<strong>青壮年</strong>（读完文章以后自然就会知道为什么太阳45亿岁是青壮年）。</p><h1 id="讲解恒星演化前的知识补充"><a href="#讲解恒星演化前的知识补充" class="headerlink" title="讲解恒星演化前的知识补充"></a>讲解恒星演化前的知识补充</h1><h2 id="赫罗图"><a href="#赫罗图" class="headerlink" title="赫罗图"></a>赫罗图</h2><p>赫罗图，是指恒星的光谱类型与光度之关系图，绝对星等是恒星的亮度，数值越小越亮，光谱型是恒星的温度分类系统，依恒星光谱的类型，把恒星分成O、B、A、F、G、K和M等类型，每个光谱都可进一步分为数字亚型，范围从0到9，更高的数字表示更低能的光谱和更红的颜色。在数字后面加上罗马数字或字母表示恒星演化阶段（如太阳光谱型为G2V）<br><img src="https://img-blog.csdnimg.cn/20200719095921153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="主序星"><a href="#主序星" class="headerlink" title="主序星"></a>主序星</h2><p>主序星是指在赫罗图主序带的恒星，当原恒星中心的温度达到1000万K左右时，氢核 聚变为氦核的热核反应持续不断地发生。由于核反应产生的巨大的辐射能使恒星内部压力增强到足以和引力相抗衡，恒星进入一个相对稳定的时期，达到完全的流体静力学平衡状态，这个时期的恒星称为主序星。原恒星与主序星的区别与分界线就是恒星内部是否发生了持续的热核反应。恒星的质量越大，氢消耗的越快，待在主序星的时间就越短。一个太阳质量的恒星为100亿年，30个太阳质量的为100万年，0.5个太阳质量的为1000亿年。</p><h2 id="简并压力和简并态"><a href="#简并压力和简并态" class="headerlink" title="简并压力和简并态"></a>简并压力和简并态</h2><p><strong>简并压力</strong>是指<strong>费米子</strong>(例如电子、中子、质子等)是有排它性的，它们不能占据空间中的同一个位置，这种粒子间的相互排斥力，<strong>白矮星</strong>就是正处于<strong>电子简并态</strong>，<strong>中子星</strong>正处于<strong>中子简并态</strong>，形成中子星就是需要更大的引力（质量）来突破<strong>电子简并力</strong>。</p><h2 id="钱德拉塞卡极限"><a href="#钱德拉塞卡极限" class="headerlink" title="钱德拉塞卡极限"></a>钱德拉塞卡极限</h2><p>钱德拉塞卡极限指白矮星的最高质量，约为3×1030公斤，是太阳质量的1.44倍。</p><h2 id="奥本海默极限"><a href="#奥本海默极限" class="headerlink" title="奥本海默极限"></a>奥本海默极限</h2><p>奥本海默极限是稳定中子星的质量上限，大约在1.5-3倍太阳质量之间，如果质量大于这个临界质量﹐就不可能成为稳定的中子星，它要么经过无限坍缩形成黑洞﹐要么形成介于中子星与黑洞之间的其他类型的致密星，这个临界质量被称为奥本海默极限。</p><h2 id="洛希极限"><a href="#洛希极限" class="headerlink" title="洛希极限"></a>洛希极限</h2><p>洛希极限是一个天体自身的引力与第二个天体造成的潮汐力（可以认为是天体旋转产生的牵引力）相等时的距离。当两个天体的距离少于洛希极限，天体就会倾向碎散，继而成为第二个天体的环</p><h2 id="史瓦西半径"><a href="#史瓦西半径" class="headerlink" title="史瓦西半径"></a>史瓦西半径</h2><p>史瓦西半径是任何具有质量的物质都存在的一个临界半径特征值。 一个物体的史瓦西半径与其质量成正比。太阳的史瓦西半径约为3千米，地球的史瓦西半径只有约9毫米。当天体半径被压缩得小于史瓦西半径时，会坍缩为黑洞。</p><h1 id="开始演化"><a href="#开始演化" class="headerlink" title="开始演化"></a>开始演化</h1><p>恒星演化是恒星在生命过程中所经历急遽变化的序列。恒星依据质量，一生的范围从质量最大的恒星只有几百万年，到质量最小的恒星比宇宙年龄还要长的数兆亿年。所有的恒星都从通常被称为星云或分子云的气体和尘埃坍缩中诞生。在几百万年的过程中，原恒星达到平衡的状态，安顿下来成为所谓的<strong>主序星</strong>，再由主序星演化为<strong>黑矮星 或 脉冲星 或 夸克星（假想） 或 黑洞</strong>。</p><h2 id="主序寿命结束，步入巨星阶段"><a href="#主序寿命结束，步入巨星阶段" class="headerlink" title="主序寿命结束，步入巨星阶段"></a>主序寿命结束，步入巨星阶段</h2><h3 id="红巨星"><a href="#红巨星" class="headerlink" title="红巨星"></a>红巨星</h3><p>当一颗恒星度过它漫长的青壮年期——主序星阶段，步入老年期时，恒星核中的氢聚合物逐渐耗尽，核心变成大部分氦，氢在燃烧中离开核心，在核心周围形成燃烧的壳。红巨星阶段根据恒星质量的不同，历时只有数百万年不等，它们的体积非常巨大（太阳变为红巨星后<strong>半径</strong>为现在的200倍）。在赫罗图上，红巨星是巨大的非主序星，光谱属于K或M型。之所以被称为红巨星是因为看起来的颜色是红的，体积又很巨大的缘故。金牛座的毕宿五和牧夫座的大角星是红巨星，猎户座的参宿四则是红超巨星。<br><img src="https://img-blog.csdnimg.cn/20200719113452884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="亚巨星分支（简单了解，不重要）"><a href="#亚巨星分支（简单了解，不重要）" class="headerlink" title="亚巨星分支（简单了解，不重要）"></a>亚巨星分支（简单了解，不重要）</h3><p>有些质量在2~5倍太阳质量的恒星，因质量巨大，亮度明亮，在氢耗完之后还没有开始燃烧氦，此时它们膨胀得大而亮度基本不变或稍有下降，进入亚巨星分支，膨胀的状态发黄，就进入了<strong>黄巨星</strong>阶段。恒星质量为2.5倍太阳质量，在离开主序带之后，即变成黄巨星。而质量较大的恒星（5倍太阳质量），由于主序阶段恒星颜色较蓝，所以在膨胀降温（壳层氢气聚变）过程（C→D）时间较长，其前半段为<strong>白巨星</strong>，后半段为<strong>黄巨星</strong>。</p><h2 id="巨星阶段结束，步入老年期"><a href="#巨星阶段结束，步入老年期" class="headerlink" title="巨星阶段结束，步入老年期"></a>巨星阶段结束，步入老年期</h2><h3 id="白矮星"><a href="#白矮星" class="headerlink" title="白矮星"></a>白矮星</h3><p>当<strong>红巨星</strong>的辐射压力不能平衡引力，外部向外膨胀并不断变冷，而内部氦核受引力作用收缩坍塌，被压缩的物质不断变热，最终内核温度将超过一亿度，于是氦开始聚变成碳。</p><p>经过几百万年，氦核燃烧殆尽，外壳仍然是以氢为主的混合物，而在它下面有一个氦层，氦层内部还埋有一个碳球，此时，在红巨星内部，已经诞生了一颗白矮星。</p><p>当恒星的不稳定状态达到极限后，红巨星会进行爆发，把核心以外的物质都抛离恒星本体，物质向外扩散成为星云，残留下来的内核就是我们能看到的白矮星，发出白光，白矮星的寿命有几十亿年。</p><p>一颗与地球体积相当的白矮星（比如说天狼星的邻星Sirius B）的表面重力约等于地球表面的18万倍。在这样高的压力下，任何物体都已不复存在，连原子都被压碎了，电子脱离了原子轨道变为自由电子。密度已经增大到每立方厘米十吨左右。</p><h3 id="中子星"><a href="#中子星" class="headerlink" title="中子星"></a>中子星</h3><p>中子星是除黑洞外密度最大的星体，密度每立方厘米1亿吨以上，当白矮星的质量大于1.44倍且小于1.5倍太阳质量的时候（相当于恒星大于8倍且小于30倍太阳质量形成的白矮星），核心会继续坍缩，把电子压入原子核，与质子形成中子，所以叫中子星，这就是<strong>钱德拉塞卡极限</strong>。</p><h3 id="超新星"><a href="#超新星" class="headerlink" title="超新星"></a>超新星</h3><p>超新星是某些恒星在演化接近末期时经历的一种剧烈爆炸，过程中所突发的电磁辐射能照亮其所在的整个星系，并持续几周至几个月才逐渐衰减。而在此期间，一颗超新星所释放的辐射能量与太阳在其一生中辐射能量的总和相当。</p><p>上面说当恒星质量大于8倍小于30倍太阳质量的时候，会形成中子星，那恒星<strong>大于30倍太阳质量</strong>的时候，一般会形成超新星，恒星在核心的氢、氦、碳等元素于核聚变反应中耗尽，当它们最终转变成铁元素时便无法从核聚变中获得能量。失去热辐射压力支撑的外围物质受重力牵引会急速向核心坠落，导致外壳的动能转化为热能，强大的能量导致了<strong>铁聚变</strong>，产生<strong>超新星爆炸</strong></p><p>一般<strong>大于30倍质量</strong>的恒星演化的超新星爆炸会留下一个遗骸——<strong>脉冲星</strong>（下面会讲），不足30倍的一般会爆炸成<strong>星云</strong>。</p><p>超新星爆炸的辐射非常强，奥陶纪60%的海洋生物的灭绝就是受距离地球100光年内的一颗超新星爆发产生的<strong>伽马射线暴</strong>的影响。</p><p><strong>超新星爆发是宇宙中最为壮观的场景</strong><br><img src="https://img-blog.csdnimg.cn/20200719121224759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="最终归宿"><a href="#最终归宿" class="headerlink" title="最终归宿"></a>最终归宿</h2><h3 id="褐矮星"><a href="#褐矮星" class="headerlink" title="褐矮星"></a>褐矮星</h3><p>质量非常小（小于0.08太阳质量）的原始星（<strong>没有成为主序星</strong>）的温度不会到达足够开始核聚变的程度，它们会成为褐矮星，在数亿年的时光中慢慢变凉</p><h3 id="黑矮星"><a href="#黑矮星" class="headerlink" title="黑矮星"></a>黑矮星</h3><p>类似太阳质量大小的<strong>白矮星</strong>(或质量较小的<strong>中子星</strong>)经过几十亿年的慢慢冷却后，停止发光发热，只剩下碳，变为一颗黑矮星，黑矮星将永存于宇宙，目前宇宙寿命大约137亿年，还没有黑矮星的形成。</p><h3 id="脉冲星"><a href="#脉冲星" class="headerlink" title="脉冲星"></a>脉冲星</h3><p>脉冲星就是高速旋转的<strong>中子星</strong>（质量介于1.44-1.5倍太阳之间），是<strong>la类超新星</strong>爆炸留下的遗骸，强大的爆炸令中子星以每秒几百圈的速度自转，脉冲形成的原因如下：<br>磁场振荡模型以太阳举例，太阳磁场的方向每过11年就会翻转一次，如果太阳塌缩成了中子星，它的自转周期可以缩短到秒级甚至毫秒级，同时，它的磁场翻转周期也可能达到毫秒级，所以产生了脉冲。</p><p><strong>中国天眼发现的脉冲星</strong><br><img src="https://img-blog.csdnimg.cn/20200719121824641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="黑洞"><a href="#黑洞" class="headerlink" title="黑洞"></a>黑洞</h3><p>上面讲的大于30倍太阳质量的恒星产生超新星爆炸会留下一个遗骸——脉冲星（也就是中子星），当遗骸的质量介于<strong>1.5-3倍</strong>太阳质量（<strong>奥本海默极限</strong>）的时候，中子星会继续坍缩，半径小于史瓦西半径后，形成<strong>黑洞</strong>。</p><p>如果恒星的质量大于<strong>250倍</strong>太阳质量，聚变晚期使其内核产生铁元素以致不能维持聚变，在强引力的作用下，核心会以接近光速25%的速度崩塌，<strong>跳过之前所有阶段</strong>直接形成黑洞。</p><p>然后黑洞会慢慢<strong>蒸发</strong>（蒸发时间随着质量增加而增加）<br><img src="https://img-blog.csdnimg.cn/20200719122241698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTIyNDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="夸克星（假想的介于中子星和黑洞之间的天体，未证实）"><a href="#夸克星（假想的介于中子星和黑洞之间的天体，未证实）" class="headerlink" title="夸克星（假想的介于中子星和黑洞之间的天体，未证实）"></a>夸克星（假想的介于中子星和黑洞之间的天体，未证实）</h3><p>夸克星是一种假设的星体，恒星死亡时会在自身重力的影响下发生坍缩，若恒星质量大于1.44倍太阳质量，中子可能破碎成自身的组成成分，即夸克。在一定的压力下半数由中子分离而成的夸克能够转化为奇夸克，产生一种更加致密的物质类型。这时的星体就是由奇夸克紧密结合在一起所构成的“夸克星”。</p><h1 id="最后讲一下太阳的命运"><a href="#最后讲一下太阳的命运" class="headerlink" title="最后讲一下太阳的命运"></a>最后讲一下太阳的命运</h1><p>太阳没有足够的质量成为中子星或爆发成为超新星，太阳是一颗<strong>黄矮星（主序星的一种，和白矮星黑矮星不同）</strong>，寿命在100亿年，约50亿年后它将进入<strong>红巨星</strong>的阶段</p><p>当核心的温度达到1亿K时，氦聚变将开始进行并燃烧生成碳。由于此时的氦核心已经相当于一个小型“<strong>白矮星</strong>”（<strong>电子简并态</strong>），热失控的氦聚变将导致<strong>氦闪（0.8-2.0太阳质量恒星的短暂失控核聚变）</strong>，释放的巨大能量使太阳核心大幅度膨胀，解除了电子简并态，然后核心剩余的氦进行稳定的聚变，太阳将如新星般突然增亮5～10个星等</p><p>其半径大约会是现在的200倍，表面将膨胀至地球现在的轨道，当太阳成为渐近巨星分支的恒星时，由于恒星风的作用，它大约已经流失30%的质量，所以地球的轨道会向外移动，如果只是这样，地球或许可以幸免，但地球可能会因为<strong>潮汐的相互作用</strong>（也就是<strong>洛希极限</strong>）而被太阳撕碎。</p><p>继红巨星阶段之后，太阳外层的气体逃逸，形成行星状星云。在外层被剥离后，唯一留存下来的就是恒星炙热的核心——<strong>白矮星</strong>，并在数十亿年中逐渐冷却和黯淡——<strong>黑矮星</strong>。这是低质量与中质量恒星演化的典型。</p><h1 id="感谢观看"><a href="#感谢观看" class="headerlink" title="感谢观看"></a>感谢观看</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity 配置与使用（含新 API 替换过时的 WebSecurityConfigurerAdapter）</title>
      <link href="/2022/11/15/SpringSecurity%20%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E5%90%AB%E6%96%B0%20API%20%E6%9B%BF%E6%8D%A2%E8%BF%87%E6%97%B6%E7%9A%84%20WebSecurityConfigurerAdapter%EF%BC%89/"/>
      <url>/2022/11/15/SpringSecurity%20%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E5%90%AB%E6%96%B0%20API%20%E6%9B%BF%E6%8D%A2%E8%BF%87%E6%97%B6%E7%9A%84%20WebSecurityConfigurerAdapter%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>As we all know，现今主流权限框架有 SpringSecurity、Shiro、SaToken，Shiro在前后端分离时代基本被淘汰，剩下适合大型项目的 <code>SpringSecurity</code> 和 适合中小型项目的 <code>SaToken</code> 可以选择，SaToken 我也写了文章 <a href="https://blog.csdn.net/qq_48922459/article/details/127048667?spm=1001.2014.3001.5501">Springboot 使用 SaToken 进行登录认证、权限管理以及路由规则接口拦截</a></p><blockquote><p>SpringSecurity 作为 Spring 的官方权限框架，肯定是最牛逼的，当然也最复杂，中小型项目还是 SaToken 来的省心呀，简单，几行代码实现认证、拦截、踢人、单点登录等，SpringSecurity 想要实现这些功能，需要深入研究，现在我只写最简单的用户认证和接口权限控制。</p></blockquote><p><code>现在的 SpringSecurity 版本更换了新的配置方式，下面有写</code></p><hr><h1 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h1><blockquote><p>自己新建一个标准的 Springboot web 项目，然后增加下面这个依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="二、启动类增加注解"><a href="#二、启动类增加注解" class="headerlink" title="二、启动类增加注解"></a>二、启动类增加注解</h1><blockquote><p><code>@EnableWebSecurity</code>表示启用户 springsecurity 功能<br><code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code>是开启基于注解的接口权限控制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 17:18</span></span><br><span class="line"><span class="comment"> * 开启方法级安全验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringSecurityDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、config配置文件"><a href="#三、config配置文件" class="headerlink" title="三、config配置文件"></a>三、config配置文件</h1><p><code>现在的 SpringSecurity 版本更换了新的配置方式，目前新版本仍兼容旧版配置，你不喜欢新版配置也可以用旧版</code></p><h2 id="旧版配置"><a href="#旧版配置" class="headerlink" title="旧版配置"></a>旧版配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 15:28</span></span><br><span class="line"><span class="comment"> * 这是旧版api</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 使用官方推荐的BCrypt加密密码，也就是md5加随机盐</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * configure(WebSecurity)用于影响全局安全性(配置资源，设置调试模式，通过实现自定义防火墙定义拒绝请求)的配置设置。</span></span><br><span class="line"><span class="comment">     * 一般用于配置全局的某些通用事物，例如静态资源等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/resources/**&quot;</span>, <span class="string">&quot;/ignore2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置接口拦截</span></span><br><span class="line"><span class="comment">     * configure(HttpSecurity)允许基于选择匹配在资源级配置基于网络的安全性，也就是对角色所能访问的接口做出限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpSecurity 请求属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        httpSecurity.authorizeRequests()</span><br><span class="line">                <span class="comment">// 允许get请求/test/any，而无需认证，不配置HttpMethod默认允许所有请求类型</span></span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/test/any&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">//指定权限为admin才能访问，这里和方法注解配置效果一样，但是会覆盖注解</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/admin&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                <span class="comment">// 所有请求都需要验证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//.httpBasic() Basic认证，和表单认证只能选一个</span></span><br><span class="line">                <span class="comment">// 使用表单认证页面</span></span><br><span class="line">                .formLogin()</span><br><span class="line">                <span class="comment">//配置登录入口，默认为security自带的页面/login</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// post请求要关闭csrf验证,不然访问报错；实际开发中开启，需要前端配合传递其他参数</span></span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="新版配置"><a href="#新版配置" class="headerlink" title="新版配置"></a>新版配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> icu.xuyijie.springsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 17:34</span></span><br><span class="line"><span class="comment"> * 新api</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityNewConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 使用官方推荐的BCrypt加密密码，也就是md5加随机盐</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * configure(WebSecurity)用于影响全局安全性(配置资源，设置调试模式，通过实现自定义防火墙定义拒绝请求)的配置设置。</span></span><br><span class="line"><span class="comment">     * 一般用于配置全局的某些通用事物，例如静态资源等</span></span><br><span class="line"><span class="comment">     * 新版本其实不推荐把路径的拦截写在这里，而是推荐写在securityFilterChain里面</span></span><br><span class="line"><span class="comment">     * &quot;You are asking Spring Security to ignore Ant [pattern=&#x27;/resources/**&#x27;]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (web) -&gt; web.ignoring().antMatchers(<span class="string">&quot;/resources/**&quot;</span>, <span class="string">&quot;/ignore2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置接口拦截</span></span><br><span class="line"><span class="comment">     * configure(HttpSecurity)允许基于选择匹配在资源级配置基于网络的安全性，也就是对角色所能访问的接口做出限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpSecurity 请求属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> HttpSecurity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        httpSecurity.authorizeRequests()</span><br><span class="line">                <span class="comment">// 允许get请求/test/any，而无需认证，不配置HttpMethod默认允许所有请求类型</span></span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/test/any&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/icon/**&quot;</span>, <span class="string">&quot;/file/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 指定权限为admin才能访问，这里和方法注解配置效果一样，但是会覆盖注解</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/admin&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                <span class="comment">// 所有请求都需要验证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//.httpBasic() Basic认证，和表单认证只能选一个</span></span><br><span class="line">                <span class="comment">// 使用表单认证页面</span></span><br><span class="line">                .formLogin()</span><br><span class="line">                <span class="comment">// 配置登录入口，默认为security自带的页面/login</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// post请求要关闭csrf验证,不然访问报错；实际开发中开启，需要前端配合传递其他参数</span></span><br><span class="line">                .csrf().disable();</span><br><span class="line">        <span class="keyword">return</span> httpSecurity.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="四、UserDetailsServiceImpl"><a href="#四、UserDetailsServiceImpl" class="headerlink" title="四、UserDetailsServiceImpl"></a>四、UserDetailsServiceImpl</h1><blockquote><p><code>UserDetailsService</code> 是 SpringSecurity 的内置类，我们需要实现它的 loadUserByUsername 方法，方法参数 <code>username</code> 就是登录时填写的用户名，里面写从数据库获取这个 username 的密码和角色，然后 return 给 <code>SpringSecurity 内置的 User 实体类</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 15:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入SpringSecurity内置的密码加密类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 通过用户名从数据库获取用户信息，略，我们直接手动定义个用户</span></span><br><span class="line">        <span class="comment">// 定义用户角色为 user</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">        <span class="comment">// 定义用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">// 角色列表</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorityList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 角色必须以ROLE_开头，security在判断角色时会自动截取ROLE_</span></span><br><span class="line">        authorityList.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + role));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                username,</span><br><span class="line">                <span class="comment">// springsecurity对比密码时默认会解密密码后对比，因为数据库一般存取加密后的密码，我们这里是明文，所以需加密密码</span></span><br><span class="line">                passwordEncoder.encode(password),</span><br><span class="line">                authorityList</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="五、写一个Controller测试用"><a href="#五、写一个Controller测试用" class="headerlink" title="五、写一个Controller测试用"></a>五、写一个Controller测试用</h1><blockquote><p>上面主启动类添加的注解开启基于注解的接口权限的意思就是开启下面的 <code>@PreAuthorize</code>注解的功能，<br>这个注解和<code>config</code> 里面配置的 <code>.antMatchers(&quot;/test/admin&quot;).hasRole(&quot;admin&quot;)</code> 一个意思，选其中一个方式即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 16:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * user和admin角色能访问该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;user&#x27;, &#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user和admin角色访问&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user和admin角色访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * admin角色才能访问该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;admin角色访问&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin角色访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebSecurityConfig里配置了该接口Get请求无需登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/any&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">any</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个接口Get请求无需登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这个接口Get请求无需登录&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="六、启动测试"><a href="#六、启动测试" class="headerlink" title="六、启动测试"></a>六、启动测试</h1><blockquote><p>我们先访问 <code>http://127.0.0.1:8081/test/any</code>，这时我们还没有登录，这个接口我们在<code>config</code> 里面配置了<code>.permitAll()</code>，所以没有被拦截，直接访问成功</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d64a9859d0174f2fb7d05e0f987651ee.png" alt="在这里插入图片描述"></p><blockquote><p>下面我门访问 <code>http://127.0.0.1:8081/test/user</code>，发现浏览器自动跳转到了登录界面，这个登录界面是SpringSecurity内置的，如需使用自定义页面，下面会讲</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2c3a050987ce4b8bbcd65c14ab2ece4c.png" alt="在这里插入图片描述"></p><blockquote><p>输入账号密码点击 Sign in，发现浏览器自动跳回<code>http://127.0.0.1:8081/test/user</code>，访问成功<br>这里我们用户名可以随便输入，因为上面<code>UserDetailsServiceImpl</code>中我们没有指定用户名，所以 123456 这个密码所有用户都能用</p></blockquote><p><img src="https://img-blog.csdnimg.cn/85b9b64cdf934e14a8ba899e4f2297cb.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/78b40ea88cf94802bd659a65dea0ec79.png" alt="在这里插入图片描述"></p><blockquote><p>如果访问 <code>/test/admin</code> 这个接口，报错 403，代表无权限</p></blockquote><p><img src="https://img-blog.csdnimg.cn/534b496df8e1431e970cf6a6ad70e7a1.png" alt="在这里插入图片描述"></p><hr><h1 id="七、前后端分离设计"><a href="#七、前后端分离设计" class="headerlink" title="七、前后端分离设计"></a>七、前后端分离设计</h1><h2 id="1、自定义登录界面"><a href="#1、自定义登录界面" class="headerlink" title="1、自定义登录界面"></a>1、自定义登录界面</h2><blockquote><p><code>config</code>里面配置的 <code>.loginProcessingUrl(&quot;/login&quot;)</code>是默认使用SpringSecurity内置登录页面，如果需要使用前端登陆页面，可以配置一个 MvnConfig 拦截接口，让前端跳转到他们的登录页面，然后把登录请求发送给&#x2F;login这个内置接口就行了</p></blockquote><blockquote><p>当然也可以单独写一个登录页面放到后端的 <code>resources/static</code>里面，这样可以直接在 <code>config的loginProcessingUrl</code>中修改</p></blockquote><h2 id="2、自定义登录成功-x2F-失败处理器"><a href="#2、自定义登录成功-x2F-失败处理器" class="headerlink" title="2、自定义登录成功&#x2F;失败处理器"></a>2、自定义登录成功&#x2F;失败处理器</h2><blockquote><p>自定义处理器，这里写你登录失败的逻辑，返回给前端数据，让前端进行页面跳转</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐一杰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/25 17:19</span></span><br><span class="line"><span class="comment"> * security认证失败逻辑，定义这个以后，security内置的页面跳转就失效了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailureHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleUrlAuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        <span class="comment">//这里写你登录失败的逻辑，返回给前端数据，让前端进行页面跳转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在<code>config</code>的<code>securityFilterChain</code>方法里面添加下面代码，<code>loginSuccessHandler</code>代码和上面一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用自定义的结果处理器，定义这个以后，security内置的页面跳转就失效了</span></span><br><span class="line">      .successHandler(loginSuccessHandler)</span><br><span class="line">      .failureHandler(loginFailureHandler)</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>SpringSecurity 作为 Spring 的官方权限框架，肯定是最牛逼的，当然也最复杂，中小型项目还是 SaToken 来的省心呀，简单，几行代码实现认证、拦截、踢人、单点登录等，SpringSecurity 想要实现这些功能，SaToken 我也写了文章 <a href="https://blog.csdn.net/qq_48922459/article/details/127048667?spm=1001.2014.3001.5501">Springboot 使用 SaToken 进行登录认证、权限管理以及路由规则接口拦截</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/12/hello-world/"/>
      <url>/2022/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
